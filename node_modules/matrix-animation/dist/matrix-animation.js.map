{"version":3,"file":"matrix-animation.js","sources":["../src/main.ts"],"sourcesContent":["import { MatrixOptions, MatrixRaindropOptions } from './types';\n\n\nconst randomInt = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst randomFloat = (min: number, max: number) => {\n    return Math.random() * (max - min) + min;\n}\n\nexport class MatrixAnimation {\n    private container: HTMLElement;\n    private _ctx: CanvasRenderingContext2D;\n    private _canvas: HTMLCanvasElement;\n    get canvas() { return this._canvas; }\n    get ctx() { return this._ctx ?? (this._ctx = this.canvas.getContext('2d')); }\n\n    frameId = 0;\n    fadeInterval = 0;\n    // full screen dimensions\n    canvasWidth = 0;\n    canvasHeight = 0;\n\n    availableCharSets = [];\n    raindrops: MatrixRaindrop[] = [];\n\n    private mutationObserver: MutationObserver;\n    private resizeObserver: ResizeObserver;\n    // Placeholder method that\n    private performCanvasShift: Function = () => { /* NOP */ };\n    // private lastFrameTime = Date.now();\n    public stopAnimation = false; // Interrupt any active animation (used as a safety)\n    private hasCreatedCanvas = false;\n    rainWidth = 0;\n\n    /**\n     * \n     * @param selector CSS Selector or HTML element that we bootstrap the canvas onto\n     * @param options Configuration options\n     */\n    constructor(\n        private selector: string | HTMLElement,\n        public options: MatrixOptions = {}\n    ) {\n        this.applyOptions(options);\n\n        this.setupElements();\n\n        this.resizeObserver = new ResizeObserver(() => this.onResize());\n        this.resizeObserver.observe(this.container);\n\n        // Watch the DOM tree -- if the contianer or canvas is destroyed\n        // then we kill the animation\n        this.mutationObserver = new MutationObserver((mutations) => {\n            mutations.forEach(m => {\n                const removed = [...m.removedNodes.values()];\n                if (removed.includes(this.container) || removed.includes(this.canvas)) {\n                    this.dispose();\n                }\n            })\n        });\n        this.mutationObserver.observe(this.container, { childList: true });\n\n        this.initCanvasShift();\n        this.initCanvas();\n    }\n\n    /**\n     * Remove all event listeners and dispose of all objects from memory.\n     */\n    dispose() {\n        this.pause();\n        this.resizeObserver.disconnect();\n        this.mutationObserver.disconnect();\n\n        this.raindrops.forEach(drop => {\n            \n        });\n\n        if (this.hasCreatedCanvas) {\n            this.canvas.remove();\n        }\n    }\n\n    /**\n     * Resume the animation from the 'paused' state\n     */\n    play() {\n        if (this.fadeInterval) clearInterval(this.fadeInterval);\n        if (this.frameId) cancelAnimationFrame(this.frameId);\n\n        this.stopAnimation = false;\n        this.fadeInterval = setInterval(() => {\n            // Fade everything slightly\n            this.ctx.fillStyle = `rgba(0,0,0,${this.options.fadeStrength ?? 0.05})`;\n            this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n        }, 20);\n        \n        this.render();\n    }\n\n    /**\n     * Pause the animation.\n     */\n    pause() {\n        this.stopAnimation = true;\n        cancelAnimationFrame(this.frameId);\n        clearInterval(this.fadeInterval);\n    }\n\n    applyOptions(options: MatrixOptions = this.options) {\n        if (typeof this.options != \"object\")\n            throw new Error(\"Options must be an object\");\n\n        this.options.minFrameTime = options.minFrameTime ?? 50;\n        this.options.rainGenerator = options.rainGenerator ?? {};\n        this.options.rainGenerator.density = this.options.rainGenerator?.density ?? options.rainGenerator?.density ?? 2;\n\n        if (!Array.isArray(this.options.rainDrop)) {\n            this.options.rainDrop = this.options.rainDrop ?? {};\n            this.rainWidth =\n                this.options.rainDrop.rainWidth =\n                this.options.rainDrop.rainWidth ?? 12;\n            this.options.rainDrop.alignToColumns = this.options.rainDrop.alignToColumns ?? true;\n        }\n        else {\n            this.rainWidth = 12;\n        }\n\n        Object.entries(options)\n            .filter(([key]) => key != \"rainDrop\")\n            .forEach(([key, value]) => this.options[key] = value);\n\n        if (typeof options.rainDrop == \"object\") {\n            Object.entries(options.rainDrop)\n                .forEach(([key, value]) => this.options.rainDrop[key] = value);\n        }\n\n        if (typeof options.rainGenerator == \"object\") {\n            Object.entries(options.rainGenerator)\n                .forEach(([key, value]) => this.options.rainGenerator[key] = value);\n        }\n\n        // Spread operator correctly serializes unicode\n        let arrs = \n            this.options.charArrays\n            ? Array.isArray(this.options.charArrays) \n                ? this.options.charArrays \n                : [this.options.charArrays]\n            : !Array.isArray(this.options.rainDrop)\n                ? this.options.rainDrop.charArrays\n                    ? Array.isArray(this.options.rainDrop.charArrays) \n                        ? this.options.rainDrop.charArrays\n                        : [this.options.rainDrop.charArrays]\n                : [\"0123456789\"]\n                : [\"0123456789\"];\n\n        // console.log(arrs)\n        this.availableCharSets = arrs;\n    }\n\n    /**\n     * Handle resize events.\n     * The component uses a ResizeObserver, so this should rarely need to be called.\n     */\n    onResize(refreshRain = true) {\n        // Negative if shrunk, 0 if unchanged, positive if grown\n        const widthChange = this.container.clientWidth - this.canvasWidth;\n        const heightChange = this.container.clientHeight - this.canvasHeight;\n\n        this.canvas.width = this.canvasWidth = this.container.clientWidth;\n        this.canvas.height = this.canvasHeight = this.container.clientHeight;\n\n        if (refreshRain) {\n            if (widthChange > 0) {\n                this.createRaindrops(true);\n            }\n            if (widthChange < 0) {\n                // Remove all the cut-off rain\n                this.raindrops = this.raindrops.filter(r => r.x < this.canvasWidth);\n            }\n            if (heightChange > 0) {\n                // TBD.\n            }\n            if (heightChange < 0) {\n                // Remove all the cut-off rain\n                this.raindrops = this.raindrops.filter(r => r.x < this.canvasWidth);\n            }\n\n            // this.createRaindrops();\n    \n            // // Preemptively draw the characters\n            // for (let i = 0; i < this.options.warmupIterations; i++)\n            //     this.drawRain();\n        }\n    }\n\n    /**\n     * Reset the raindrops\n     */\n    resetRaindrops() {\n        this.raindrops.splice(0);\n        this.createRaindrops();\n    }\n\n    private setupElements() {\n        if (typeof this.selector == \"string\") {\n            let el = document.querySelector(this.selector);\n            if (!el) {\n                throw new Error(\"No element matching selector \\\"\" + this.selector + \"\\\"\");\n            }\n            if (el.nodeName == \"CANVAS\") {\n                this.container = el.parentElement;\n            }\n            else {\n                this.container = el as HTMLElement;\n            }\n        }\n        else if (this.selector instanceof HTMLElement) {\n            if (this.selector.nodeName == \"CANVAS\") {\n                this.container = this.selector.parentElement;\n            }\n            else {\n                this.container = this.selector as HTMLElement;\n            }\n        }\n        else {\n            const error = new Error(\"Invalid selector passed to MatrixAnimation\");\n            error['selector'] = this.selector;\n            error['options'] = this.options;\n            throw error;\n        }\n\n        let canvas = this.container.querySelector(\"canvas\");\n\n        if (!canvas) {\n            this.hasCreatedCanvas = true;\n            canvas = document.createElement(\"canvas\");\n            this.container.append(canvas);\n        }\n        this._canvas = canvas;\n\n        // TODO: this might need to be changed?\n        if (getComputedStyle(this.container).position == 'static') {\n            this.container.style.position = \"relative\";\n        }\n        canvas.style.width = \"100%\";\n        canvas.style.height = \"100%\";\n        canvas.style.position = \"absolute\";\n    }\n\n    private initCanvasShift() {\n        switch (this.options.windDirection) {\n            case \"LR\": {\n                this.performCanvasShift = () => {\n                    this.ctx.globalCompositeOperation = \"copy\";\n                    this.ctx.drawImage(this.ctx.canvas, this.options.windSpeed, 0);\n                    // reset back to normal for subsequent operations.\n                    this.ctx.globalCompositeOperation = \"source-over\";\n                };\n                break;\n            }\n            case \"BU\": {\n                this.performCanvasShift = () => {\n                    this.ctx.globalCompositeOperation = \"copy\";\n                    this.ctx.drawImage(this.ctx.canvas, 0, -this.options.windSpeed);\n                    // reset back to normal for subsequent operations.\n                    this.ctx.globalCompositeOperation = \"source-over\";\n                };\n                break;\n            }\n            case \"RL\": {\n                this.performCanvasShift = () => {\n                    this.ctx.globalCompositeOperation = \"copy\";\n                    this.ctx.drawImage(this.ctx.canvas, -this.options.windSpeed, 0);\n                    // reset back to normal for subsequent operations.\n                    this.ctx.globalCompositeOperation = \"source-over\";\n                };\n                break;\n            }\n            case \"TD\": {\n                this.performCanvasShift = () => {\n                    this.ctx.globalCompositeOperation = \"copy\";\n                    this.ctx.drawImage(this.ctx.canvas, 0, this.options.windSpeed);\n                    // reset back to normal for subsequent operations.\n                    this.ctx.globalCompositeOperation = \"source-over\";\n                };\n                break;\n            }\n        }\n    }\n\n    private initCanvas() {\n        this.onResize(false);\n\n        this.createRaindrops();\n\n        this.ctx.textAlign = \"center\";\n        this.ctx.imageSmoothingEnabled = false;\n        // Preemptively draw the characters\n        // for (let i = 0; i < this.options.warmupIterations; i++)\n            // this.drawRain();\n    }\n\n    private createRaindrops(add = false) {\n        // If we aren't adding more rain, we're resetting things.\n        if (!add) {\n            this.raindrops.splice(0);\n        }\n\n        if (Array.isArray(this.options.rainDrop)) {\n            // We have an array of preconfigured raindrops\n        }\n        else {\n            const opts = this.options.rainGenerator;\n            const maxColumns = this.canvasWidth / (this.rainWidth);\n\n            let i = opts.count\n                ? opts.count \n                :~~((opts.density ?? 2) * maxColumns);\n            \n            if (Array.isArray(this.options.rainDrop)) \n                throw new Error(\"Cannont set rainDrops when rainGenerator is set\");\n\n            const dropOpts = structuredClone(this.options.rainDrop);\n\n            while (i--) {\n                this.raindrops.push(\n                    new MatrixRaindrop(\n                        (this.options.rainDrop.alignToColumns ?? this.options.alignToColumns)\n                            ? opts.density\n                            ? (randomInt(0, maxColumns) * this.rainWidth)\n                            : (i % maxColumns) * this.rainWidth\n                            : randomFloat(0, this.canvasWidth),\n                        randomFloat(0, this.canvasHeight),\n                        this,\n                        dropOpts\n                    )\n                );\n            }\n        }\n\n        if (this.options.autoStart != false) {\n            this.play();\n        }\n    }\n\n    // Context bound to this class\n    private render = (() => {\n        if (this.stopAnimation) return;\n\n        this.drawRain();\n        this.frameId = requestAnimationFrame(this.render);\n    }).bind(this);\n\n    private drawRain() {\n        let i = this.raindrops.length;\n        const t = Date.now();\n\n        // Call clear before we apply the fade fill\n        this.ctx.shadowColor = this.options.trailBloomColor;\n        this.ctx.shadowBlur = this.options.trailBloomSize;\n        while (i--) {\n            const drop = this.raindrops[i];\n            \n            if (t - drop.lastFrameTime > drop.config.frameDelay) {\n                drop.clear(this.ctx);\n            }\n        }\n        this.ctx.shadowColor = \"\";\n        this.ctx.shadowBlur = 0;\n\n        if (this.options.windSpeed > 0)\n            this.performCanvasShift();\n\n        // Fade everything slightly\n        // this.ctx.fillStyle = `rgba(0,0,0,${this.options.fadeStrength ?? 0.05})`;\n        // this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n        i = this.raindrops.length;\n\n        this.ctx.shadowColor = this.options.trailBloomColor;\n        this.ctx.shadowBlur = this.options.trailBloomSize;\n\n        while (i--) {\n            const drop = this.raindrops[i];\n\n            if (t - drop.lastFrameTime > drop.config.frameDelay) {\n                // this.raindrops[i].clear(this.ctx);\n                drop.draw(this.ctx);\n                drop.lastFrameTime = t;\n            }\n        }\n\n        this.ctx.shadowColor = \"\";\n        this.ctx.shadowBlur = 0;\n    }\n}\n\nclass MatrixRaindrop {\n    private charList: string[] = [];\n\n    private trailChars: {\n        x: number,\n        y: number,\n        char: string\n    }[] = [];\n\n    private shiftDirection: Function;\n    private trailLength: number;\n    private font: string;\n    public lastFrameTime = 0;\n\n    constructor(\n        public x: number,\n        public y: number,\n        private matrixAnimation: MatrixAnimation,\n        public config: MatrixRaindropOptions = {}\n    ) {\n        this.initConfig();\n        this.randomizeChars();\n        this.initMoveDirection();\n        this.onRespawn();\n    }\n\n    private initConfig() {\n        Object.keys(this.matrixAnimation).forEach(k => {\n            this.config[k] = this.config[k] ?? this.matrixAnimation[k];\n        });\n\n        this.trailLength = \n            this.matrixAnimation.options.trailColorLogic == \"sequential\" \n            ? (this.config.trailColors ?? []).length \n            : 1//Math.ceil(1 / this.opacity);\n        this.font = \n            (this.config.fontSize ?? 14) + \n            \"px \" + \n            (this.config.fontFamily ?? \"Arial\");\n    }\n\n    initMoveDirection() {\n        const keepBoundsVertically = () => {\n            if (this.x > this.matrixAnimation.canvasWidth) {\n                this.x = 1;\n            }\n            else if (this.x < 0) {\n                this.x = this.matrixAnimation.canvasWidth-1;\n            }\n        }\n        const keepBoundsHorizontally = () => {\n            if (this.y > this.matrixAnimation.canvasHeight) {\n                this.y = 1;\n            }\n            else if (this.y < 0) {\n                this.y = this.matrixAnimation.canvasHeight-1;\n            }\n        }\n\n        switch (this.config.direction) {\n            case \"LR\": {\n                this.shiftDirection = () => {\n                    this.x += (this.config.minMoveSpeed && this.config.maxMoveSpeed)\n                        ? randomFloat(this.config.minMoveSpeed, this.config.maxMoveSpeed)\n                        : (this.matrixAnimation.options.rainWidth ?? 0);\n\n                    if (this.x > this.matrixAnimation.canvasWidth) {\n                        this.randomizeChars();\n\n                        this.x = randomFloat(-100, 0);\n                        this.onRespawn();\n                    }\n                    keepBoundsHorizontally();\n                };\n                break;\n            }\n            case \"BU\": {\n                this.shiftDirection = () => {\n                    this.y -= (this.config.minMoveSpeed && this.config.maxMoveSpeed)\n                        ? randomFloat(this.config.minMoveSpeed, this.config.maxMoveSpeed)\n                        : (this.matrixAnimation.options.rainHeight ?? 0);\n\n                        if (this.y < 0) {\n                        this.randomizeChars();\n\n                        this.y = randomFloat(this.matrixAnimation.canvasHeight, this.matrixAnimation.canvasHeight + 100);\n                        this.onRespawn();\n                    }\n                    keepBoundsVertically();\n                };\n                break;\n            }\n            case \"RL\": {\n                this.shiftDirection = () => {\n                    this.x -= (this.config.minMoveSpeed && this.config.maxMoveSpeed)\n                        ? randomFloat(this.config.minMoveSpeed, this.config.maxMoveSpeed)\n                        : (this.matrixAnimation.options.rainWidth ?? 0);\n\n                    if (this.x < 0) {\n                        this.randomizeChars();\n\n                        this.x = randomFloat(this.matrixAnimation.canvasWidth, this.matrixAnimation.canvasWidth + 100);\n                        this.onRespawn();\n                    }\n                    keepBoundsHorizontally();\n                };\n                break;\n            }\n            case \"TD\":\n            default: {\n                this.shiftDirection = () => {\n                    this.y += (this.config.minMoveSpeed && this.config.maxMoveSpeed)\n                        ? randomFloat(this.config.minMoveSpeed, this.config.maxMoveSpeed)\n                        : (this.matrixAnimation.options.rainHeight ?? 0);\n\n                    if (this.y > this.matrixAnimation.canvasHeight) {\n                        this.randomizeChars();\n\n                        this.y = randomFloat(-100, 0);\n                        this.onRespawn();\n                    }\n                    keepBoundsVertically();\n                };\n                break;\n            }\n        }\n    }\n\n    randomizeChars() {\n        this.charList = this.matrixAnimation.availableCharSets[~~(Math.random() * this.matrixAnimation.availableCharSets.length)];\n    }\n\n    onRespawn() {\n        if (this.matrixAnimation.options.charArrays?.length > 1) {\n            this.randomizeChars();\n        }\n\n        if (this.config.randomizeFrameDelay) {\n            this.config.frameDelay = randomInt(\n                this.config.minFrameDelay ?? 30, \n                this.config.maxFrameDelay ?? 60\n            );\n        }\n\n        // Randomize the position when the drop respawns\n        if (this.config.randomizePosition) {\n            if (this.config.direction == \"LR\" || this.config.direction == \"RL\") {\n                const maxColumns = this.matrixAnimation.canvasHeight / (this.config.rainWidth);\n                if (this.config.alignToColumns)\n                    this.y = (randomInt(0, maxColumns) * this.config.rainWidth);\n                else\n                    this.y = randomFloat(0, this.matrixAnimation.canvasHeight);\n            }\n            else {\n                const maxColumns = this.matrixAnimation.canvasWidth / (this.config.rainWidth);\n                if (this.config.alignToColumns)\n                    this.x = (randomInt(0, maxColumns) * this.config.rainWidth);\n                else\n                    this.x = randomFloat(0, this.matrixAnimation.canvasWidth);\n            }\n        }\n    }\n\n    clear(ctx: CanvasRenderingContext2D) {\n        let i = this.trailChars.length;\n        while (i--) {\n            const char = this.trailChars[i];\n\n            const fill = \n                this.config.trailColors\n                ? this.matrixAnimation.options.trailColorLogic == \"sequential\"\n                    ? (this.config.trailColors[i] ?? this.config.trailColors[this.config.trailColors.length -1])\n                    : this.config.trailColors[randomInt(0, this.config.trailColors.length)]\n                : this.config.trailColor || \"#fff\";\n            ctx.fillStyle = fill;\n            ctx.font = this.font;\n            ctx.fillText(char.char, char.x, char.y);\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D) {\n        const char = this.charList[randomInt(0, this.charList.length - 1)];\n\n        this.trailChars.unshift({ char, x: this.x, y: this.y});\n        this.trailChars.splice(this.trailLength);\n\n        ctx.shadowColor = this.matrixAnimation.options.headBloomColor;\n        ctx.shadowBlur = this.matrixAnimation.options.headBloomSize;\n        ctx.fillStyle = this.config.headColor ?? \"rgba(255,255,255,0.8)\";\n        ctx.font = this.font;\n        ctx.fillText(char, this.x, this.y);\n        ctx.shadowColor = \"\";\n        ctx.shadowBlur = 0;\n\n        if (this.config.jitterDownStrength || this.config.jitterUpStrength)\n            this.y += randomFloat(-(this.config.jitterUpStrength ?? 0), this.config.jitterDownStrength ?? 0);\n        if (this.config.jitterLeftStrength || this.config.jitterRightStrength)\n            this.x += randomFloat(-(this.config.jitterLeftStrength ?? 0), this.config.jitterRightStrength ?? 0);\n\n        this.shiftDirection();\n    }\n}"],"names":["randomInt","min","max","randomFloat","MatrixAnimation","selector","options","__publicField","mutations","m","removed","drop","_a","_b","key","value","arrs","refreshRain","widthChange","heightChange","r","el","error","canvas","add","opts","maxColumns","i","dropOpts","MatrixRaindrop","x","y","matrixAnimation","config","k","keepBoundsVertically","keepBoundsHorizontally","ctx","char","fill"],"mappings":"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"}